# 1)Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats

salary = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
credit_scoring = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
# Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy
# Полученные значения должны быть равны.
# Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков,
# а затем с использованием функций из библиотек numpy и pandas.

# 1) Находим ковариацию по формуле:
cov = np.mean(salary*credit_scoring) - np.mean(salary) * np.mean(credit_scoring)    # 9157.839999999997
print(f'Ковариация по формуле: {cov}')

# 2) С помощью функции numpy:
cov_np = np.cov(salary, credit_scoring, ddof=0) # 9157.84
print('Корреляция по функции:', cov_np)

# 3) Находим коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений:
coef_Pearsons = cov_np/(np.std(salary, ddof=0) * np.std(credit_scoring, ddof=0)) # 0.88749009
print(f'Коэффициент Пирсона по формуле: {coef_Pearsons}')

# 4) C использованием функций из библиотек numpy и pandas:
coef_stats = stats.pearsonr(salary, credit_scoring)
print('Коэффициент Пирсона по функции:', coef_stats)    # 0.8874900920739162
plt.scatter(salary, credit_scoring)
plt.title( 'coef_Pearson = 0.88749009')
plt.xlabel('salary')
plt.ylabel('credit_scoring')
plt.show()

######################################################

# 2) Измерены значения IQ выборки студентов, обучающихся в местных технических вузах/
# Известно, что в генеральной совокупности IQ распределен нормально.
# Найдите доверительный интервал для математического ожидания с надежностью 0.95.
import numpy as np
import scipy.stats as stats

iq = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])
reliability = 0.95

# 1) Находим t-критерий:
t = stats.t.ppf(reliability, len(iq)-1) # 1.8331129326536333
print('Критерий Стьюдента =', t)

# 2) Находим границы:
low = np.mean(iq) - t * (np.std(iq, ddof = 1)/np.sqrt(len(iq))) # 111.9868745068196
up = np.mean(iq) + t * (np.std(iq, ddof = 1)/np.sqrt(len(iq)))  # 124.21312549318039
print(f'Границы доверительного интервала: [{low}; {up}]')

####################################################

# 3)Известно, что рост футболистов в сборной распределен нормально с дисперсией генеральной совокупности, равной 25 кв.см. 
# Объем выборки равен 27, среднее выборочное составляет 174.2. Найдите доверительный интервал для 
# математического ожидания с надежностью 0.95.

import numpy as np
import scipy.stats as stats

var_general = 25
n = 27
x = 174.2
reliability = 0.95

# 1) Найдем Z-критерий:
z = stats.norm.ppf(reliability)
print(f'Z-критерий = {z}')

# 2) Находим границы доверительного интервала для математического ожидания:
low = x - z * np.sqrt(var_general/n)
up = x + z * np.sqrt(var_general/n)
print(f'Доверительный интервал в пределах [{low}; {up}]')